{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/Users/siou/Downloads/code/performance/frontend_dev/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/Users/siou/Downloads/code/performance/frontend_dev/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport { io, Manager } from 'socket.io-client';\nimport { ip } from '../config';\nconst socketUrl = {\n  url: `http://${ip}:5002`,\n  urlMain: '/main'\n};\n\nlet socketManager = token => new Manager(socketUrl.url, {\n  transports: ['websocket'],\n  autoConnect: true,\n  forceNew: true,\n  query: `${token}siousiou`\n});\n\nlet socketBasic = token => socketManager(token).socket('/');\n\nlet socketMain = token => socketManager(token).socket(socketUrl.urlMain);\n\nexport const connectBasicSocket = token => {\n  var _socketBasic;\n\n  if ((_socketBasic = socketBasic(token)) !== null && _socketBasic !== void 0 && _socketBasic.connected) return; // socketBasic = io.connect(socketUrl.url, {\n  //     transports: ['websocket'],\n  //     autoConnect: true,\n  //     forceNew: true,\n  //     query: `${token}siousiou`,\n  // });\n\n  socketBasic(token).on('connect', data => {\n    console.log('connect data => ', data);\n  });\n};\nexport const disconnectSocket = token => {\n  if (!socketBasic(token)) return;\n  socketBasic(token).disconnect();\n};\nexport const connectMainSocket = async token => {\n  console.log(\"it is main socket\", socketMain(token)); // socketMain = io.connect(socketUrl.url + socketUrl.urlMain, {\n  //     transports: ['websocket'],\n  //     autoConnect: true,\n  //     forceNew: true,\n  //     query: `${token}siousiou`,\n  // });\n\n  socketMain(token).on('DataBaseChange', data => {\n    console.log('DataBaseChange => ', data);\n  });\n  socketMain(token).emit(\"DataBaseChange\", {});\n};\n\nvar _connection = /*#__PURE__*/_classPrivateFieldLooseKey(\"connection\");\n\nvar _disconnection = /*#__PURE__*/_classPrivateFieldLooseKey(\"disconnection\");\n\nexport default class SocketIO extends Manager {\n  constructor(token) {\n    super(socketUrl.url, {\n      transports: ['websocket'],\n      autoConnect: true,\n      forceNew: true,\n      query: `${token}siousiou`\n    });\n    this._token = token;\n  }\n\n  static async getInstance(token) {\n    if (!SocketIO.instance) {\n      SocketIO.instance = new SocketIO(token);\n    }\n\n    _classPrivateFieldLooseBase(this, _connection)[_connection](SocketIO.instance);\n\n    _classPrivateFieldLooseBase(this, _disconnection)[_disconnection](SocketIO.instance);\n\n    return await SocketIO.instance;\n  }\n\n  static emitBasicEvent(event, params) {\n    this.socket('/').emit(event, params);\n  }\n\n  static emitMainEvent(event, params) {\n    this.socket('/main').emit(event, params);\n  }\n\n  get GetemitBasicEvent() {}\n\n}\n\nfunction _connection2(instance) {\n  instance.socket('/').on('connect', data => {\n    console.log('connect data => ', data);\n  });\n}\n\nfunction _disconnection2(instance) {\n  instance.socket('/').on('disconnect', data => {\n    console.log('is already disconnected');\n  });\n}\n\nObject.defineProperty(SocketIO, _disconnection, {\n  value: _disconnection2\n});\nObject.defineProperty(SocketIO, _connection, {\n  value: _connection2\n});","map":{"version":3,"sources":["/Users/siou/Downloads/code/performance/frontend_dev/src/page/socketIo.js"],"names":["io","Manager","ip","socketUrl","url","urlMain","socketManager","token","transports","autoConnect","forceNew","query","socketBasic","socket","socketMain","connectBasicSocket","connected","on","data","console","log","disconnectSocket","disconnect","connectMainSocket","emit","SocketIO","constructor","_token","getInstance","instance","emitBasicEvent","event","params","emitMainEvent","GetemitBasicEvent"],"mappings":"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","sourcesContent":["import {io,Manager} from 'socket.io-client';\nimport {ip} from '../config';\nconst socketUrl = {\n    url: `http://${ip}:5002`,\n    urlMain: '/main',\n}\nlet socketManager = (token) =>( new Manager(socketUrl.url,{\n    transports: ['websocket'],\n    autoConnect: true,\n    forceNew: true,\n    query: `${token}siousiou`,\n}))\nlet socketBasic = (token) => socketManager(token).socket('/');\nlet socketMain = (token) => socketManager(token).socket(socketUrl.urlMain);\n\nexport const connectBasicSocket = (token) => {\n    if (socketBasic(token)?.connected) return;\n\n    // socketBasic = io.connect(socketUrl.url, {\n    //     transports: ['websocket'],\n    //     autoConnect: true,\n    //     forceNew: true,\n    //     query: `${token}siousiou`,\n    // });\n\n    socketBasic(token).on('connect', (data) => {\n        console.log('connect data => ',data)\n    });\n}\n\nexport const disconnectSocket = (token) => {\n    if (!socketBasic(token)) return;\n    socketBasic(token).disconnect()\n};\n\nexport const connectMainSocket =async (token) => {\n    console.log(\"it is main socket\",socketMain(token))\n    \n    // socketMain = io.connect(socketUrl.url + socketUrl.urlMain, {\n    //     transports: ['websocket'],\n    //     autoConnect: true,\n    //     forceNew: true,\n    //     query: `${token}siousiou`,\n    // });\n\n    socketMain(token).on('DataBaseChange', (data) => {\n        console.log('DataBaseChange => ', data)\n    });\n    socketMain(token).emit(\"DataBaseChange\", {})\n}\n\n\nexport default class SocketIO extends Manager{\n    constructor(token) {\n        super(socketUrl.url,{\n            transports: ['websocket'],\n            autoConnect: true,\n            forceNew: true,\n            query: `${token}siousiou`,\n        })\n        this._token = token;\n    }\n\n    static async getInstance(token) {\n        if (!SocketIO.instance) {\n            SocketIO.instance = new SocketIO(token)\n        }\n        this.#connection(SocketIO.instance)\n        this.#disconnection(SocketIO.instance)\n        \n        return await SocketIO.instance;\n    }\n\n    static #connection(instance) {\n        instance.socket('/').on('connect', (data) => {\n            console.log('connect data => ',data)\n        });\n    }\n\n    static #disconnection(instance) {\n        instance.socket('/').on('disconnect', (data) => {\n            console.log('is already disconnected')\n        })\n    }\n\n    static emitBasicEvent(event, params) {\n        this.socket('/').emit(event, params);\n    }\n    \n    static emitMainEvent(event, params) {\n        this.socket('/main').emit(event, params);\n    }\n\n    get GetemitBasicEvent(){\n        \n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}