{"ast":null,"code":"import { banch_index, backend, year_performance, insert_banch_table, updata_performance_table } from \"../api\";\nexport async function check_and_recatch_data(token, synchronize_update, sec) {\n  //負責設定同步畫面及同步抓取資料\n  var result1 = await banch_index(token);\n  var result2 = await backend(token);\n  var result3 = await year_performance(token);\n  synchronize_update(true); //設定同步頁面開始\n\n  setTimeout(() => {\n    if (result1 === true && result2 === true && result3 === true) {\n      //代表資料已經更新\n      synchronize_update(false); //設定同步頁面結束\n\n      return true;\n    }\n\n    return false;\n  }, sec);\n}\n;\nexport function search(arr, item_index, new_item, reCatchData, synchronize_update) {\n  //reCatchData=reCatchData.current\n  // arr 原陣列 ,,  item_index 更新的資料所在的畫面位置  ,,  new_item 更新的資料\n  // function search 把原先的陣列 要更新的資料刪除 之後 加入更新的資料\n  var list = [];\n  var temp = [];\n  var count = 0;\n  console.log('-----------------------------------');\n  console.log('arr 原陣列', arr);\n  console.log('item_index 要更新的位置', item_index);\n  console.log('new_item 新的資料', new_item);\n\n  for (let data = 0; data < arr.length; data++) {\n    if (arr[data].length === 1) {//如果判斷到 陣列裡面是「’+‘」號  就不加入 跳過\n    } else if (data !== item_index) {\n      list.push(arr[data]);\n    } else {\n      //如果跑到的data與item_index要插入的位置相等 \n      //新增  並且帶入check function\n      list.push(new_item);\n      check_arr(new_item, reCatchData, synchronize_update);\n    }\n  }\n\n  for (let none = 0; none < list.length; none++) {\n    //尋找[[],[],[]] 空字串有幾個 \n    count = 0;\n\n    for (let data of list[none]) {\n      if (data === '') {\n        count += 1;\n      }\n    }\n\n    if (count < list[none].length - 2) {\n      temp.push(list[none]);\n    }\n  }\n\n  return temp;\n}\n;\nexport async function update(new_item, set_new_emp) {\n  //function update 更新 performance_per_month的資料\n  var token = window.sessionStorage.getItem('token');\n  var result1 = await updata_performance_table(new_item, token);\n  var result2 = await backend(token);\n  var result3 = await year_performance(token);\n  var timer = setInterval(() => {\n    if (result1 === true && result2 === true && result3 === true) {\n      set_new_emp('已儲存變更');\n      clearInterval(timer);\n    }\n  }, 100);\n}\nexport async function check_arr(arr, reCatchData, synchronize_update) {\n  //當資料填完整後就request api\n  //arr=[帳號,密碼,名字,組別,編號,開始日期,職位權限,工作狀態]\n  var count = 0;\n  var token = window.sessionStorage.getItem('token');\n\n  for (var data of arr) {\n    if (data !== '') {\n      count += 1;\n    }\n  }\n\n  if (count === arr.length) {\n    var result = await insert_banch_table(token, arr); //api\n    //result?alert(`資料庫存取成功${result}`):alert(`資料庫存取失敗${result}`)\n\n    if (result === 'update' && reCatchData === true) {\n      check_and_recatch_data(token, synchronize_update, 200); //負責設定同步畫面及同步抓取資料\n\n      reCatchData = false; //重新抓取資料狀態 否\n    } else if (result === 'insert' && reCatchData === true) {\n      var a = window.prompt('請輸入新員工 開始的資料(ex:年 月)').split(' '); //api\n\n      var data = [arr[0], a[0], parasa[1]];\n      check_and_recatch_data(token, synchronize_update, 200); //負責設定同步畫面及同步抓取資料\n\n      reCatchData = false; //重新抓取資料狀態 否\n    }\n  }\n}\n;\nexport function obj_to_arr(obj) {\n  var a = Object.values(obj).map(v => {\n    return v;\n  });\n  console.log('物件轉陣列', a);\n  return a;\n}\n;\nexport function rule_num_letter(e) {\n  var value = e.target.value;\n  var ascii;\n  var return_string = '';\n\n  for (let num = 0; num < value.length; num++) {\n    ascii = value.codePointAt(num);\n\n    if (ascii >= 48 && ascii <= 57 || ascii >= 65 && ascii <= 90 || ascii >= 97 && ascii <= 122) {\n      return_string += String.fromCharCode(ascii);\n    }\n  }\n\n  e.target.value = return_string;\n  return return_string;\n}\nexport function rule_num(e, maxValue) {\n  var value = e.target.value;\n  var ascii;\n  var return_string = '';\n\n  for (let num = 0; num < value.length; num++) {\n    ascii = value.codePointAt(num);\n\n    if (ascii >= 48 && ascii <= 57) {\n      if (num === 0 && ascii === 48) {\n        continue; //跳過第一個數為0\n      }\n\n      return_string += String.fromCharCode(ascii);\n    }\n  }\n\n  return_string = parseInt(return_string.length > 0 ? return_string : '0'); //如果是空時  就替換成 '0'\n\n  return_string = return_string > maxValue ? maxValue : return_string; //如果出來的值大於最大值時，就把他釘在最大值\n\n  e.target.value = return_string;\n  return return_string;\n}","map":{"version":3,"sources":["/Users/admin/Downloads/code/dajia/frontend/src/page/method/method_func.js"],"names":["banch_index","backend","year_performance","insert_banch_table","updata_performance_table","check_and_recatch_data","token","synchronize_update","sec","result1","result2","result3","setTimeout","search","arr","item_index","new_item","reCatchData","list","temp","count","console","log","data","length","push","check_arr","none","update","set_new_emp","window","sessionStorage","getItem","timer","setInterval","clearInterval","result","a","prompt","split","parasa","obj_to_arr","obj","Object","values","map","v","rule_num_letter","e","value","target","ascii","return_string","num","codePointAt","String","fromCharCode","rule_num","maxValue","parseInt"],"mappings":"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","sourcesContent":["import { banch_index,backend,year_performance,insert_banch_table, updata_performance_table } from \"../api\"\nexport async function check_and_recatch_data(token,synchronize_update,sec){\n    //負責設定同步畫面及同步抓取資料\n    var result1=await banch_index(token)\n    var result2=await backend(token)\n    var result3=await year_performance(token)\n    synchronize_update(true)//設定同步頁面開始\n    setTimeout(() => {\n        if(result1===true&&result2===true&&result3===true){\n                //代表資料已經更新\n            synchronize_update(false)//設定同步頁面結束\n            return true\n        }\n        return false\n    }, sec);\n};\n\nexport function search(arr,item_index,new_item,reCatchData,synchronize_update){\n    //reCatchData=reCatchData.current\n    // arr 原陣列 ,,  item_index 更新的資料所在的畫面位置  ,,  new_item 更新的資料\n    // function search 把原先的陣列 要更新的資料刪除 之後 加入更新的資料\n        var list=[]\n        var temp=[]\n        var count=0\n        console.log('-----------------------------------')\n        console.log('arr 原陣列',arr)\n        console.log('item_index 要更新的位置',item_index)\n        console.log('new_item 新的資料',new_item)\n    \n        for(let data=0;data<arr.length;data++){\n            if(arr[data].length===1){\n                //如果判斷到 陣列裡面是「’+‘」號  就不加入 跳過\n            }\n            else if(data!==item_index){\n                list.push(arr[data])\n            }\n            else{\n                //如果跑到的data與item_index要插入的位置相等 \n                //新增  並且帶入check function\n                list.push(new_item)\n                check_arr(new_item,reCatchData,synchronize_update)\n            }\n        }\n        \n        for(let none=0;none<list.length;none++){\n            //尋找[[],[],[]] 空字串有幾個 \n            count=0\n            for(let data of list[none]){\n                if(data===''){\n                    count+=1\n                }\n            }\n            if(count<list[none].length-2){\n                temp.push(list[none])\n            }\n        }\n        return temp\n};\n\nexport async function update(new_item,set_new_emp){\n    //function update 更新 performance_per_month的資料\n    var token=window.sessionStorage.getItem('token')\n    var result1=await updata_performance_table(new_item,token)\n    var result2= await backend(token)\n    var result3=await year_performance(token)\n\n    var timer=setInterval(()=>{\n        if(result1===true&&result2===true&&result3===true){\n            set_new_emp('已儲存變更')\n            clearInterval(timer)\n        }\n    },100)\n}\n\nexport async function check_arr(arr,reCatchData,synchronize_update){\n    //當資料填完整後就request api\n    //arr=[帳號,密碼,名字,組別,編號,開始日期,職位權限,工作狀態]\n    var count=0\n    var token=window.sessionStorage.getItem('token')\n    for(var data of arr){\n        if(data!==''){\n            count+=1\n        }\n    }\n    if(count===arr.length){\n        var result=await insert_banch_table(token,arr) //api\n        //result?alert(`資料庫存取成功${result}`):alert(`資料庫存取失敗${result}`)\n        if(result==='update' &&reCatchData===true){\n            check_and_recatch_data(token,synchronize_update,200)//負責設定同步畫面及同步抓取資料\n            reCatchData=false//重新抓取資料狀態 否\n        }\n        else if(result==='insert'&&reCatchData===true){\n            var a=window.prompt('請輸入新員工 開始的資料(ex:年 月)').split(' ')\n            //api\n            var data=[arr[0],a[0],parasa[1]]\n            check_and_recatch_data(token,synchronize_update,200)//負責設定同步畫面及同步抓取資料\n            reCatchData=false//重新抓取資料狀態 否\n        }\n        \n    }\n};\n\nexport function obj_to_arr(obj){\n    var a=Object.values(obj).map((v)=>{\n        return v\n    })\n    console.log('物件轉陣列',a)\n    return a\n};\n\nexport function rule_num_letter(e){\n    var value =e.target.value\n    var ascii\n    var return_string=''\n\n    for(let num=0;num<value.length;num++){\n        ascii=value.codePointAt(num)\n        if((ascii>=48&&ascii<=57)||(ascii>=65&&ascii<=90)||(ascii>=97&&ascii<=122)){\n            return_string+=String.fromCharCode(ascii)\n        }\n    }\n    e.target.value=return_string\n    return return_string\n\n}\nexport function rule_num(e,maxValue){\n    var value =e.target.value\n    var ascii\n    var return_string=''\n\n    for(let num=0;num<value.length;num++){\n        ascii=value.codePointAt(num)\n        if((ascii>=48&&ascii<=57)){\n            if(num===0 && ascii===48){\n                continue;//跳過第一個數為0\n            }\n            return_string+=String.fromCharCode(ascii)\n        }\n    }\n    return_string=parseInt(return_string.length>0?return_string:'0')//如果是空時  就替換成 '0'\n    return_string=return_string>maxValue?maxValue:return_string//如果出來的值大於最大值時，就把他釘在最大值\n    e.target.value=return_string\n    return return_string\n\n}"]},"metadata":{},"sourceType":"module"}